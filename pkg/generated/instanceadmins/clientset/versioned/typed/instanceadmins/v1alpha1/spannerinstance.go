/*
Copyright 2019 The Kubernetes spanner-controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/katsew/spanner-operator/pkg/apis/instanceadmins/v1alpha1"
	scheme "github.com/katsew/spanner-operator/pkg/generated/instanceadmins/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	autoscaling "k8s.io/kubernetes/pkg/apis/autoscaling"
)

// SpannerInstancesGetter has a method to return a SpannerInstanceInterface.
// A group's client should implement this interface.
type SpannerInstancesGetter interface {
	SpannerInstances(namespace string) SpannerInstanceInterface
}

// SpannerInstanceInterface has methods to work with SpannerInstance resources.
type SpannerInstanceInterface interface {
	Create(*v1alpha1.SpannerInstance) (*v1alpha1.SpannerInstance, error)
	Update(*v1alpha1.SpannerInstance) (*v1alpha1.SpannerInstance, error)
	UpdateStatus(*v1alpha1.SpannerInstance) (*v1alpha1.SpannerInstance, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.SpannerInstance, error)
	List(opts v1.ListOptions) (*v1alpha1.SpannerInstanceList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SpannerInstance, err error)
	GetScale(spannerInstanceName string, options v1.GetOptions) (*v1alpha1.SpannerInstance, error)
	UpdateScale(spannerInstanceName string, scale *autoscaling.Scale) (*v1alpha1.SpannerInstance, error)

	SpannerInstanceExpansion
}

// spannerInstances implements SpannerInstanceInterface
type spannerInstances struct {
	client rest.Interface
	ns     string
}

// newSpannerInstances returns a SpannerInstances
func newSpannerInstances(c *InstanceadminsV1alpha1Client, namespace string) *spannerInstances {
	return &spannerInstances{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the spannerInstance, and returns the corresponding spannerInstance object, and an error if there is any.
func (c *spannerInstances) Get(name string, options v1.GetOptions) (result *v1alpha1.SpannerInstance, err error) {
	result = &v1alpha1.SpannerInstance{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("spannerinstances").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of SpannerInstances that match those selectors.
func (c *spannerInstances) List(opts v1.ListOptions) (result *v1alpha1.SpannerInstanceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.SpannerInstanceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("spannerinstances").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested spannerInstances.
func (c *spannerInstances) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("spannerinstances").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a spannerInstance and creates it.  Returns the server's representation of the spannerInstance, and an error, if there is any.
func (c *spannerInstances) Create(spannerInstance *v1alpha1.SpannerInstance) (result *v1alpha1.SpannerInstance, err error) {
	result = &v1alpha1.SpannerInstance{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("spannerinstances").
		Body(spannerInstance).
		Do().
		Into(result)
	return
}

// Update takes the representation of a spannerInstance and updates it. Returns the server's representation of the spannerInstance, and an error, if there is any.
func (c *spannerInstances) Update(spannerInstance *v1alpha1.SpannerInstance) (result *v1alpha1.SpannerInstance, err error) {
	result = &v1alpha1.SpannerInstance{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("spannerinstances").
		Name(spannerInstance.Name).
		Body(spannerInstance).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *spannerInstances) UpdateStatus(spannerInstance *v1alpha1.SpannerInstance) (result *v1alpha1.SpannerInstance, err error) {
	result = &v1alpha1.SpannerInstance{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("spannerinstances").
		Name(spannerInstance.Name).
		SubResource("status").
		Body(spannerInstance).
		Do().
		Into(result)
	return
}

// Delete takes name of the spannerInstance and deletes it. Returns an error if one occurs.
func (c *spannerInstances) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("spannerinstances").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *spannerInstances) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("spannerinstances").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched spannerInstance.
func (c *spannerInstances) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SpannerInstance, err error) {
	result = &v1alpha1.SpannerInstance{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("spannerinstances").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}

// GetScale takes name of the spannerInstance, and returns the corresponding v1alpha1.SpannerInstance object, and an error if there is any.
func (c *spannerInstances) GetScale(spannerInstanceName string, options v1.GetOptions) (result *v1alpha1.SpannerInstance, err error) {
	result = &v1alpha1.SpannerInstance{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("spannerinstances").
		Name(spannerInstanceName).
		SubResource("scale").
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// UpdateScale takes the top resource name and the representation of a scale and updates it. Returns the server's representation of the spannerInstance, and an error, if there is any.
func (c *spannerInstances) UpdateScale(spannerInstanceName string, scale *autoscaling.Scale) (result *v1alpha1.SpannerInstance, err error) {
	result = &v1alpha1.SpannerInstance{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("spannerinstances").
		Name(spannerInstanceName).
		SubResource("scale").
		Body(scale).
		Do().
		Into(result)
	return
}
