/*
Copyright 2019 The Kubernetes spanner-controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/katsew/spanner-operator/pkg/apis/databaseadmins/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpannerDatabaseLister helps list SpannerDatabases.
type SpannerDatabaseLister interface {
	// List lists all SpannerDatabases in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabase, err error)
	// SpannerDatabases returns an object that can list and get SpannerDatabases.
	SpannerDatabases(namespace string) SpannerDatabaseNamespaceLister
	SpannerDatabaseListerExpansion
}

// spannerDatabaseLister implements the SpannerDatabaseLister interface.
type spannerDatabaseLister struct {
	indexer cache.Indexer
}

// NewSpannerDatabaseLister returns a new SpannerDatabaseLister.
func NewSpannerDatabaseLister(indexer cache.Indexer) SpannerDatabaseLister {
	return &spannerDatabaseLister{indexer: indexer}
}

// List lists all SpannerDatabases in the indexer.
func (s *spannerDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerDatabase))
	})
	return ret, err
}

// SpannerDatabases returns an object that can list and get SpannerDatabases.
func (s *spannerDatabaseLister) SpannerDatabases(namespace string) SpannerDatabaseNamespaceLister {
	return spannerDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpannerDatabaseNamespaceLister helps list and get SpannerDatabases.
type SpannerDatabaseNamespaceLister interface {
	// List lists all SpannerDatabases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabase, err error)
	// Get retrieves the SpannerDatabase from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SpannerDatabase, error)
	SpannerDatabaseNamespaceListerExpansion
}

// spannerDatabaseNamespaceLister implements the SpannerDatabaseNamespaceLister
// interface.
type spannerDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpannerDatabases in the indexer for a given namespace.
func (s spannerDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpannerDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpannerDatabase))
	})
	return ret, err
}

// Get retrieves the SpannerDatabase from the indexer for a given namespace and name.
func (s spannerDatabaseNamespaceLister) Get(name string) (*v1alpha1.SpannerDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("spannerdatabase"), name)
	}
	return obj.(*v1alpha1.SpannerDatabase), nil
}
